{"version":3,"sources":["Search.js","App.js","index.js"],"names":["useStyles1","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","page","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","createData","title","year","poster","imdb","Search","apikey","React","setPage","rowsPerPage","setRowsPerPage","rows","setRows","searchQuery","setSearchQuery","pagesSeen","setPagesSeen","overlapMap","setOverlapMap","showList","setShowList","currentRow","setCurrentRow","emptyRows","Math","min","length","Box","display","flexDirection","justifyContent","value","onChange","newValue","onRequestSearch","num","axios","get","then","res","tempRows","data","i","imdbID","push","Title","Year","Poster","style","width","marginTop","marginBottom","borderWidth","borderColor","borderStyle","paddingTop","paddingBottom","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","scope","align","TableBody","slice","map","row","hover","handleRowClick","height","colSpan","TableFooter","color","cursor","temp","sort","a","b","TablePagination","rowsPerPageOptions","count","SelectProps","inputProps","native","newPage","Response","concat","onChangeRowsPerPage","parseInt","target","ActionsComponent","Link","variant","Image","src","fluid","fontWeight","Director","Rated","imdbRating","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8dAuBMA,EAAaC,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACJC,WAAY,EACZC,WAAYH,EAAMI,QAAQ,UAI9B,SAASC,EAAuBC,GAC9B,IAAMC,EAAUT,IACVE,EAAQQ,cACNC,EAAuBH,EAAvBG,KAAMC,EAAiBJ,EAAjBI,aAed,OACE,sBAAKC,UAAWJ,EAAQN,KAAxB,UACE,cAACW,EAAA,EAAD,CACEC,QAhB6B,SAACC,GAClCJ,EAAaI,EAAO,IAgBhBC,SAAmB,IAATN,EACVO,aAAW,aAHb,SAKuB,QAApBhB,EAAMiB,UAAsB,cAAC,IAAD,IAAmB,cAAC,IAAD,MAElD,cAACL,EAAA,EAAD,CAAYC,QAjBc,SAACC,GAC7BJ,EAAaI,EAAOL,EAAO,IAgBmBM,SAAmB,IAATN,EAAYO,aAAW,gBAA7E,SACuB,QAApBhB,EAAMiB,UAAsB,cAAC,IAAD,IAAyB,cAAC,IAAD,MAExD,cAACL,EAAA,EAAD,CACEC,QAjBwB,SAACC,GAC7BJ,EAAaI,EAAOL,EAAO,IAiBvBM,SAAUN,EAAO,IACjBO,aAAW,YAHb,SAKuB,QAApBhB,EAAMiB,UAAsB,cAAC,IAAD,IAAwB,cAAC,IAAD,SAa7D,SAASC,EAAWC,EAAOC,EAAMC,EAAQC,EAAMb,GAC7C,MAAO,CAAEU,QAAOC,OAAMC,SAAQC,OAAMb,QAItC,IAyNec,EAzNA,WACb,IAAMC,EAAS,WACf,EAAwBC,WAAe,GAAvC,mBAAOhB,EAAP,KAAaiB,EAAb,KACA,EAAsCD,WAAe,IAArD,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAwBH,WAAe,IAAvC,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAAsCL,WAAe,IAArD,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAkCP,WAAe,IAAjD,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAAoCT,WAAe,IAAnD,mBAAOU,EAAP,KAAmBC,EAAnB,KACA,EAAgCX,YAAe,GAA/C,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAAoCb,WAAe,MAAnD,mBAAOc,EAAP,KAAmBC,EAAnB,KACMC,EAAYd,EAAce,KAAKC,IAAIhB,EAAaE,EAAKe,OAASnC,EAAOkB,GAiF3E,OACE,gCACE,cAACkB,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAAvD,SACE,cAAC,IAAD,CACEC,MAAOlB,EACPmB,SAAU,SAACC,GAAcnB,EAAemB,IACxCC,gBAAiB,kBAxCIC,EAwC4B,OAvCvDC,IAAMC,IAAN,qCAAwCxB,EAAxC,4BAAuEsB,EAAvE,mBAAqF7B,IACpFgC,MAAK,SAAAC,GACJvB,EAAa,IACbR,EAAQ,GACRU,EAAc,IACd,IAAIsB,EAAW,GACf,GAAU,MAAPD,GAA2B,MAAZA,EAAIE,MAAmC,MAAnBF,EAAIE,KAAKpC,OAC7C,IAAI,IAAIqC,EAAI,EAAGA,EAAIH,EAAIE,KAAKpC,OAAOqB,OAAQgB,KACI,IAA1CzB,EAAWsB,EAAIE,KAAKpC,OAAOqC,GAAGC,UAC/BH,EAASI,KAAK5C,EAAWuC,EAAIE,KAAKpC,OAAOqC,GAAGG,MAAON,EAAIE,KAAKpC,OAAOqC,GAAGI,KAAMP,EAAIE,KAAKpC,OAAOqC,GAAGK,OAAQR,EAAIE,KAAKpC,OAAOqC,GAAGC,OAAQD,EAAI,IAAQnD,IAC9I0B,EAAWsB,EAAIE,KAAKpC,OAAOqC,GAAGC,SAAU,GAI9CvB,GAAY,GACZE,EAAc,MACdV,EAAQ4B,MAjBS,IAAQL,GAyCrBa,MAAO,CACLC,MAAO,MACPC,UAAW,MACXC,aAAc,MACdC,YAAa,EACbC,YAAa,SACbC,YAAa,cAMjBnC,GAA0B,MAAdE,IACZ,cAACM,EAAA,EAAD,CAAKqB,MAxBU,CACnBO,WAAY,OACZC,cAAe,QAsBe5B,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAA5E,SACE,cAAC2B,EAAA,EAAD,CAAgBT,MAjCD,CACrBC,MAAO,MACPG,YAAa,EAAGC,YAAa,SAASC,YAAa,SA+BPI,UAAWC,IAAjD,SACE,eAACC,EAAA,EAAD,CAAO9D,aAAW,0BAAlB,UACE,cAAC+D,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWL,UAAU,KAAKM,MAAM,MAAhC,mBACA,cAACD,EAAA,EAAD,CAAWf,MAAO,CAAEC,MAAO,IAAMgB,MAAM,OAAvC,kBACA,cAACF,EAAA,EAAD,CAAWf,MAAO,CAAEC,MAAO,IAAMgB,MAAM,OAAvC,0BAGJ,eAACC,EAAA,EAAD,YACIzD,EAAc,EACZE,EAAKwD,MAAM5E,EAAOkB,EAAalB,EAAOkB,EAAcA,GACpDE,GACFyD,KAAI,SAACC,GAAD,OACF,eAACP,EAAA,EAAD,CAAUQ,OAAK,EAAC3E,QAAS,SAACC,GAAD,OA5EpB,SAACA,EAAOyE,GAC7BjC,IAAMC,IAAN,qCAAwCgC,EAAIjE,KAA5C,mBAA2DE,IAC1DgC,MAAK,SAAAC,GACJjB,EAAciB,EAAIE,MAClBrB,GAAY,MAwEsCmD,CAAe3E,EAAOyE,IAA1D,UACE,cAACN,EAAA,EAAD,CAAWL,UAAU,KAAKM,MAAM,MAAhC,SACGK,EAAIpE,QAEP,cAAC8D,EAAA,EAAD,CAAWf,MAAO,CAAEC,MAAO,IAAMgB,MAAM,OAAvC,SACGI,EAAInE,OAEP,cAAC6D,EAAA,EAAD,CAAWf,MAAO,CAAEC,MAAO,IAAMgB,MAAM,OAAvC,SACGI,EAAIjE,SAR4DiE,EAAIjE,KAAOiE,EAAI9E,SAavFgC,EAAY,GACX,cAACuC,EAAA,EAAD,CAAUd,MAAO,CAAEwB,OAAQ,GAAKjD,GAAhC,SACE,cAACwC,EAAA,EAAD,CAAWU,QAAS,SAI1B,cAACC,EAAA,EAAD,UACE,eAACZ,EAAA,EAAD,WACE,6BACE,mBACEd,MAAO,CAAC2B,MAAO,UAAWC,OAAQ,WAClCjF,QAhHY,WAC9B,IAAIkF,EAAOlE,EAAKwD,QAChBU,EAAKC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE7E,KAAO8E,EAAE9E,KAAQ,GAAK,KAC7CU,EAAQiE,GACRrE,EAAQ,IA0GQ,yCAKF,cAACyE,EAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,IACxBT,QAAS,EACTU,OAAQ,EACR1E,YAAaA,EACblB,KAAMA,EACN6F,YAAa,CACXC,WAAY,CAAE,aAAc,iBAC5BC,QAAQ,GAEV9F,aAtJO,SAACI,EAAO2F,IACA,IAA5BxE,EAAUwE,EAAU,IACrBnD,IAAMC,IAAN,qCAAwCxB,EAAxC,iBAA4D0E,EAAU,EAAtE,8BAA6FjF,IAC5FgC,MAAK,SAAAC,GACJ,GAAU,MAAPA,GAAqC,UAAtBA,EAAIE,KAAK+C,SAA3B,CACAzE,EAAUwE,EAAU,KAAM,EAC1B,IAAI/C,EAAW,GACf,GAAU,MAAPD,GAA2B,MAAZA,EAAIE,MAAmC,MAAnBF,EAAIE,KAAKpC,OAC7C,IAAI,IAAIqC,EAAI,EAAGA,EAAIH,EAAIE,KAAKpC,OAAOqB,OAAQgB,KACI,IAA1CzB,EAAWsB,EAAIE,KAAKpC,OAAOqC,GAAGC,UAC/BH,EAASI,KAAK5C,EAAWuC,EAAIE,KAAKpC,OAAOqC,GAAGG,MAAON,EAAIE,KAAKpC,OAAOqC,GAAGI,KAAMP,EAAIE,KAAKpC,OAAOqC,GAAGK,OAAQR,EAAIE,KAAKpC,OAAOqC,GAAGC,OAAQ,EAAID,EAAI6C,IAC1ItE,EAAWsB,EAAIE,KAAKpC,OAAOqC,GAAGC,SAAU,GAI9C/B,EAAQD,EAAK8E,OAAOjD,IACV,MAAPD,GAA2B,MAAZA,EAAIE,MAAmC,MAAnBF,EAAIE,KAAKpC,QAC7CG,EAAQ+E,OAIZ/E,EAAQ+E,IAkIMG,oBAvHc,SAAC9F,GAC/Bc,EAAeiF,SAAS/F,EAAMgG,OAAO7D,MAAO,KAC5CvB,EAAQ,IAsHQqF,iBAAkB1G,iBAS9BgC,GAA0B,MAAdE,GACZ,eAACM,EAAA,EAAD,CAAKqB,MA5FO,CAChBO,WAAY,OACZC,cAAe,QA0FY5B,QAAQ,OAAOC,cAAc,SAASC,eAAe,SAA5E,UACE,cAACgE,EAAA,EAAD,CACEpC,UAAU,SACVqC,QAAQ,QACRpG,QAAS,WACPyB,GAAY,GACZE,EAAc,OALlB,sCAUA,iCACE,cAAC0E,EAAA,EAAD,CAAOC,IAAK5E,EAAW0B,OAAQmD,OAAK,MAEtC,eAACvE,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAAvD,UACE,mBAAGkB,MAAO,CAACmD,WAAY,QAAvB,wBACA,4BAAI9E,EAAWwB,WAEjB,eAAClB,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAAvD,UACE,mBAAGkB,MAAO,CAACmD,WAAY,QAAvB,uBACA,4BAAI9E,EAAWyB,UAEjB,eAACnB,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAAvD,UACE,mBAAGkB,MAAO,CAACmD,WAAY,QAAvB,2BACA,4BAAI9E,EAAW+E,cAEjB,eAACzE,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAAvD,UACE,mBAAGkB,MAAO,CAACmD,WAAY,QAAvB,wBACA,4BAAI9E,EAAWgF,WAEjB,eAAC1E,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAAvD,UACE,mBAAGkB,MAAO,CAACmD,WAAY,QAAvB,yBACA,4BAAI9E,EAAWiF,uBCvRZC,MARf,WACE,OACE,qBAAK9G,UAAU,MAAf,SACE,cAAC,EAAD,OCDN+G,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.77944f80.chunk.js","sourcesContent":["import * as React from 'react'; \r\nimport SearchBar from \"material-ui-search-bar\";\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Link from '@material-ui/core/Link';\r\nimport axios from 'axios';\r\nimport Box from '@material-ui/core/Box';\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { page, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n    \r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page > 100}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(title, year, poster, imdb, page) {\r\n  return { title, year, poster, imdb, page };\r\n}\r\n\r\n\r\nconst Search = () => {\r\n  const apikey = \"73f61f10\";\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [rows, setRows] = React.useState([]);\r\n  const [searchQuery, setSearchQuery] = React.useState('');\r\n  const [pagesSeen, setPagesSeen] = React.useState({});\r\n  const [overlapMap, setOverlapMap] = React.useState({});\r\n  const [showList, setShowList] = React.useState(true);\r\n  const [currentRow, setCurrentRow] = React.useState(null)\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  \r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    if(pagesSeen[newPage + \"\"] !== true) {\r\n      axios.get(`https://www.omdbapi.com/?s=${searchQuery}&page=${newPage + 1}&type=movie&apikey=${apikey}`)\r\n      .then(res => {\r\n        if(res != null && res.data.Response === 'False') return;\r\n        pagesSeen[newPage + \"\"] = true;\r\n        var tempRows = [];\r\n        if(res != null && res.data != null && res.data.Search != null) {\r\n          for(var i = 0; i < res.data.Search.length; i++) {\r\n            if(overlapMap[res.data.Search[i].imdbID] !== true) {\r\n              tempRows.push(createData(res.data.Search[i].Title, res.data.Search[i].Year, res.data.Search[i].Poster, res.data.Search[i].imdbID, 3 * i + newPage))\r\n              overlapMap[res.data.Search[i].imdbID] = true;\r\n            }\r\n          }\r\n        }\r\n        setRows(rows.concat(tempRows));\r\n        if(res != null && res.data != null && res.data.Search != null) {\r\n          setPage(newPage);\r\n        }\r\n      });\r\n    } else {\r\n      setPage(newPage);\r\n    }\r\n  };\r\n\r\n  const handleSortResultsByYear = () => {\r\n    var temp = rows.slice();\r\n    temp.sort((a, b) => (a.year > b.year) ? 1 : -1)\r\n    setRows(temp)\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleRowClick = (event, row) => {\r\n    axios.get(`https://www.omdbapi.com/?i=${row.imdb}&apikey=${apikey}`)\r\n    .then(res => {\r\n      setCurrentRow(res.data);\r\n      setShowList(false);\r\n    });\r\n  };\r\n  const handleSearch = (value, num) => {\r\n    axios.get(`https://www.omdbapi.com/?s=${searchQuery}&type=movie&page=${num}&apikey=${apikey}`)\r\n    .then(res => {\r\n      setPagesSeen({})\r\n      setPage(0)\r\n      setOverlapMap({})\r\n      var tempRows = [];\r\n      if(res != null && res.data != null && res.data.Search != null) {\r\n        for(var i = 0; i < res.data.Search.length; i++) {\r\n          if(overlapMap[res.data.Search[i].imdbID] !== true) {\r\n            tempRows.push(createData(res.data.Search[i].Title, res.data.Search[i].Year, res.data.Search[i].Poster, res.data.Search[i].imdbID, i + 10000 + page))\r\n            overlapMap[res.data.Search[i].imdbID] = true;\r\n          }\r\n        }\r\n      }\r\n      setShowList(true);\r\n      setCurrentRow(null);\r\n      setRows(tempRows);\r\n    });\r\n  }\r\n\r\n\r\n  const tableContainer = {\r\n    width: '95%',\r\n    borderWidth: 2, borderColor: 'orange',borderStyle: 'solid'\r\n  }\r\n  const container = {\r\n    paddingTop: '20px',\r\n    paddingBottom: '10px',\r\n  }\r\n  const boxContainer = {\r\n    paddingTop: '20px',\r\n    paddingBottom: '10px'\r\n  }\r\n  return (\r\n    <div>\r\n      <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n        <SearchBar\r\n          value={searchQuery}\r\n          onChange={(newValue) => {setSearchQuery(newValue);}}\r\n          onRequestSearch={() => handleSearch(searchQuery, 1)}\r\n          style={{\r\n            width: '90%',\r\n            marginTop: '5px',\r\n            marginBottom: '5px',\r\n            borderWidth: 2, \r\n            borderColor: 'orange',\r\n            borderStyle: 'solid'\r\n\r\n          }}\r\n        />\r\n      </Box>\r\n      \r\n      {(showList || currentRow == null) &&\r\n        <Box style={boxContainer} display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n          <TableContainer style={tableContainer}component={Paper}>\r\n            <Table aria-label=\"custom pagination table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell component=\"th\" scope=\"row\">Title</TableCell>\r\n                  <TableCell style={{ width: 80 }} align=\"left\">Year</TableCell>\r\n                  <TableCell style={{ width: 80 }} align=\"left\">IMDB ID</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {(rowsPerPage > 0\r\n                  ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  : rows\r\n                ).map((row) => (\r\n                    <TableRow hover onClick={(event) => handleRowClick(event, row)} key={row.imdb + row.page}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {row.title}\r\n                      </TableCell>\r\n                      <TableCell style={{ width: 80 }} align=\"left\">\r\n                        {row.year}\r\n                      </TableCell>\r\n                      <TableCell style={{ width: 80 }} align=\"left\">\r\n                        {row.imdb}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                ))}\r\n\r\n                {emptyRows > 0 && (\r\n                  <TableRow style={{ height: 53 * emptyRows }}>\r\n                    <TableCell colSpan={6} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n              <TableFooter>\r\n                <TableRow>\r\n                  <td>\r\n                    <p\r\n                      style={{color: '#4b51b5', cursor: 'pointer'}}\r\n                      onClick={handleSortResultsByYear}\r\n                    >Sort seen results by year</p>\r\n                  </td>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10]}\r\n                    colSpan={3}\r\n                    count={-1}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    SelectProps={{\r\n                      inputProps: { 'aria-label': 'rows per page' },\r\n                      native: true,\r\n                    }}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    ActionsComponent={TablePaginationActions}\r\n                  />\r\n                </TableRow>\r\n                \r\n              </TableFooter>\r\n            </Table>\r\n          </TableContainer>\r\n        </Box>\r\n      }\r\n      {!showList && currentRow != null &&\r\n        <Box style={container} display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\r\n          <Link\r\n            component=\"button\"\r\n            variant=\"body2\"\r\n            onClick={() => {\r\n              setShowList(true);\r\n              setCurrentRow(null);\r\n            }}\r\n          >\r\n            Return to search results\r\n          </Link>\r\n          <figure>\r\n            <Image src={currentRow.Poster} fluid />\r\n          </figure>\r\n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n            <p style={{fontWeight: \"bold\"}}>Title:&nbsp;</p>\r\n            <p>{currentRow.Title}</p>\r\n          </Box>\r\n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n            <p style={{fontWeight: \"bold\"}}>Year:&nbsp;</p>\r\n            <p>{currentRow.Year}</p>\r\n          </Box>\r\n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n            <p style={{fontWeight: \"bold\"}}>Director:&nbsp;</p>\r\n            <p>{currentRow.Director}</p>\r\n          </Box>\r\n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n            <p style={{fontWeight: \"bold\"}}>Rated:&nbsp;</p>\r\n            <p>{currentRow.Rated}</p>\r\n          </Box>\r\n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n            <p style={{fontWeight: \"bold\"}}>Rating:&nbsp;</p>\r\n            <p>{currentRow.imdbRating}</p>\r\n          </Box>\r\n        </Box>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Search;","import './App.css';\nimport Search from './Search.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}